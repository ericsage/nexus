// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cyservice.proto

#ifndef PROTOBUF_cyservice_2eproto__INCLUDED
#define PROTOBUF_cyservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace cyservice {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_cyservice_2eproto();
void protobuf_AssignDesc_cyservice_2eproto();
void protobuf_ShutdownFile_cyservice_2eproto();

class AnonymousAspect;
class Edge;
class EdgeAttribute;
class Fragment;
class KeyValue;
class MetaData;
class NetworkAttribute;
class Node;
class NodeAttribute;

// ===================================================================

class Fragment : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cyservice.Fragment) */ {
 public:
  Fragment();
  virtual ~Fragment();

  Fragment(const Fragment& from);

  inline Fragment& operator=(const Fragment& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Fragment& default_instance();

  enum ElementCase {
    kMetadata = 1,
    kNode = 2,
    kEdge = 3,
    kNodeAttribute = 4,
    kEdgeAttribute = 5,
    kNetworkAttribute = 6,
    kAspect = 7,
    ELEMENT_NOT_SET = 0,
  };

  void Swap(Fragment* other);

  // implements Message ----------------------------------------------

  inline Fragment* New() const { return New(NULL); }

  Fragment* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Fragment& from);
  void MergeFrom(const Fragment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Fragment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .cyservice.MetaData metadata = 1;
  bool has_metadata() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 1;
  const ::cyservice::MetaData& metadata() const;
  ::cyservice::MetaData* mutable_metadata();
  ::cyservice::MetaData* release_metadata();
  void set_allocated_metadata(::cyservice::MetaData* metadata);

  // optional .cyservice.Node node = 2;
  bool has_node() const;
  void clear_node();
  static const int kNodeFieldNumber = 2;
  const ::cyservice::Node& node() const;
  ::cyservice::Node* mutable_node();
  ::cyservice::Node* release_node();
  void set_allocated_node(::cyservice::Node* node);

  // optional .cyservice.Edge edge = 3;
  bool has_edge() const;
  void clear_edge();
  static const int kEdgeFieldNumber = 3;
  const ::cyservice::Edge& edge() const;
  ::cyservice::Edge* mutable_edge();
  ::cyservice::Edge* release_edge();
  void set_allocated_edge(::cyservice::Edge* edge);

  // optional .cyservice.NodeAttribute nodeAttribute = 4;
  bool has_nodeattribute() const;
  void clear_nodeattribute();
  static const int kNodeAttributeFieldNumber = 4;
  const ::cyservice::NodeAttribute& nodeattribute() const;
  ::cyservice::NodeAttribute* mutable_nodeattribute();
  ::cyservice::NodeAttribute* release_nodeattribute();
  void set_allocated_nodeattribute(::cyservice::NodeAttribute* nodeattribute);

  // optional .cyservice.EdgeAttribute edgeAttribute = 5;
  bool has_edgeattribute() const;
  void clear_edgeattribute();
  static const int kEdgeAttributeFieldNumber = 5;
  const ::cyservice::EdgeAttribute& edgeattribute() const;
  ::cyservice::EdgeAttribute* mutable_edgeattribute();
  ::cyservice::EdgeAttribute* release_edgeattribute();
  void set_allocated_edgeattribute(::cyservice::EdgeAttribute* edgeattribute);

  // optional .cyservice.NetworkAttribute networkAttribute = 6;
  bool has_networkattribute() const;
  void clear_networkattribute();
  static const int kNetworkAttributeFieldNumber = 6;
  const ::cyservice::NetworkAttribute& networkattribute() const;
  ::cyservice::NetworkAttribute* mutable_networkattribute();
  ::cyservice::NetworkAttribute* release_networkattribute();
  void set_allocated_networkattribute(::cyservice::NetworkAttribute* networkattribute);

  // optional .cyservice.AnonymousAspect aspect = 7;
  bool has_aspect() const;
  void clear_aspect();
  static const int kAspectFieldNumber = 7;
  const ::cyservice::AnonymousAspect& aspect() const;
  ::cyservice::AnonymousAspect* mutable_aspect();
  ::cyservice::AnonymousAspect* release_aspect();
  void set_allocated_aspect(::cyservice::AnonymousAspect* aspect);

  ElementCase element_case() const;
  // @@protoc_insertion_point(class_scope:cyservice.Fragment)
 private:
  inline void set_has_metadata();
  inline void set_has_node();
  inline void set_has_edge();
  inline void set_has_nodeattribute();
  inline void set_has_edgeattribute();
  inline void set_has_networkattribute();
  inline void set_has_aspect();

  inline bool has_element() const;
  void clear_element();
  inline void clear_has_element();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union ElementUnion {
    ElementUnion() {}
    ::cyservice::MetaData* metadata_;
    ::cyservice::Node* node_;
    ::cyservice::Edge* edge_;
    ::cyservice::NodeAttribute* nodeattribute_;
    ::cyservice::EdgeAttribute* edgeattribute_;
    ::cyservice::NetworkAttribute* networkattribute_;
    ::cyservice::AnonymousAspect* aspect_;
  } element_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_cyservice_2eproto();
  friend void protobuf_AssignDesc_cyservice_2eproto();
  friend void protobuf_ShutdownFile_cyservice_2eproto();

  void InitAsDefaultInstance();
  static Fragment* default_instance_;
};
// -------------------------------------------------------------------

class MetaData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cyservice.MetaData) */ {
 public:
  MetaData();
  virtual ~MetaData();

  MetaData(const MetaData& from);

  inline MetaData& operator=(const MetaData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MetaData& default_instance();

  void Swap(MetaData* other);

  // implements Message ----------------------------------------------

  inline MetaData* New() const { return New(NULL); }

  MetaData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MetaData& from);
  void MergeFrom(const MetaData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MetaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // optional int64 idCounter = 3;
  void clear_idcounter();
  static const int kIdCounterFieldNumber = 3;
  ::google::protobuf::int64 idcounter() const;
  void set_idcounter(::google::protobuf::int64 value);

  // optional int64 elementCount = 4;
  void clear_elementcount();
  static const int kElementCountFieldNumber = 4;
  ::google::protobuf::int64 elementcount() const;
  void set_elementcount(::google::protobuf::int64 value);

  // optional int64 consistencyGroup = 5;
  void clear_consistencygroup();
  static const int kConsistencyGroupFieldNumber = 5;
  ::google::protobuf::int64 consistencygroup() const;
  void set_consistencygroup(::google::protobuf::int64 value);

  // optional int64 checksum = 6;
  void clear_checksum();
  static const int kChecksumFieldNumber = 6;
  ::google::protobuf::int64 checksum() const;
  void set_checksum(::google::protobuf::int64 value);

  // repeated .cyservice.KeyValue properties = 7;
  int properties_size() const;
  void clear_properties();
  static const int kPropertiesFieldNumber = 7;
  const ::cyservice::KeyValue& properties(int index) const;
  ::cyservice::KeyValue* mutable_properties(int index);
  ::cyservice::KeyValue* add_properties();
  ::google::protobuf::RepeatedPtrField< ::cyservice::KeyValue >*
      mutable_properties();
  const ::google::protobuf::RepeatedPtrField< ::cyservice::KeyValue >&
      properties() const;

  // @@protoc_insertion_point(class_scope:cyservice.MetaData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::int64 idcounter_;
  ::google::protobuf::int64 elementcount_;
  ::google::protobuf::int64 consistencygroup_;
  ::google::protobuf::int64 checksum_;
  ::google::protobuf::RepeatedPtrField< ::cyservice::KeyValue > properties_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cyservice_2eproto();
  friend void protobuf_AssignDesc_cyservice_2eproto();
  friend void protobuf_ShutdownFile_cyservice_2eproto();

  void InitAsDefaultInstance();
  static MetaData* default_instance_;
};
// -------------------------------------------------------------------

class KeyValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cyservice.KeyValue) */ {
 public:
  KeyValue();
  virtual ~KeyValue();

  KeyValue(const KeyValue& from);

  inline KeyValue& operator=(const KeyValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValue& default_instance();

  void Swap(KeyValue* other);

  // implements Message ----------------------------------------------

  inline KeyValue* New() const { return New(NULL); }

  KeyValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValue& from);
  void MergeFrom(const KeyValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:cyservice.KeyValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cyservice_2eproto();
  friend void protobuf_AssignDesc_cyservice_2eproto();
  friend void protobuf_ShutdownFile_cyservice_2eproto();

  void InitAsDefaultInstance();
  static KeyValue* default_instance_;
};
// -------------------------------------------------------------------

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cyservice.Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  void Swap(Node* other);

  // implements Message ----------------------------------------------

  inline Node* New() const { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string represents = 3;
  void clear_represents();
  static const int kRepresentsFieldNumber = 3;
  const ::std::string& represents() const;
  void set_represents(const ::std::string& value);
  void set_represents(const char* value);
  void set_represents(const char* value, size_t size);
  ::std::string* mutable_represents();
  ::std::string* release_represents();
  void set_allocated_represents(::std::string* represents);

  // @@protoc_insertion_point(class_scope:cyservice.Node)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr represents_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cyservice_2eproto();
  friend void protobuf_AssignDesc_cyservice_2eproto();
  friend void protobuf_ShutdownFile_cyservice_2eproto();

  void InitAsDefaultInstance();
  static Node* default_instance_;
};
// -------------------------------------------------------------------

class Edge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cyservice.Edge) */ {
 public:
  Edge();
  virtual ~Edge();

  Edge(const Edge& from);

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Edge& default_instance();

  void Swap(Edge* other);

  // implements Message ----------------------------------------------

  inline Edge* New() const { return New(NULL); }

  Edge* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Edge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int64 id() const;
  void set_id(::google::protobuf::int64 value);

  // optional int64 sourceId = 2;
  void clear_sourceid();
  static const int kSourceIdFieldNumber = 2;
  ::google::protobuf::int64 sourceid() const;
  void set_sourceid(::google::protobuf::int64 value);

  // optional int64 targetId = 3;
  void clear_targetid();
  static const int kTargetIdFieldNumber = 3;
  ::google::protobuf::int64 targetid() const;
  void set_targetid(::google::protobuf::int64 value);

  // optional string interaction = 4;
  void clear_interaction();
  static const int kInteractionFieldNumber = 4;
  const ::std::string& interaction() const;
  void set_interaction(const ::std::string& value);
  void set_interaction(const char* value);
  void set_interaction(const char* value, size_t size);
  ::std::string* mutable_interaction();
  ::std::string* release_interaction();
  void set_allocated_interaction(::std::string* interaction);

  // @@protoc_insertion_point(class_scope:cyservice.Edge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 sourceid_;
  ::google::protobuf::int64 targetid_;
  ::google::protobuf::internal::ArenaStringPtr interaction_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cyservice_2eproto();
  friend void protobuf_AssignDesc_cyservice_2eproto();
  friend void protobuf_ShutdownFile_cyservice_2eproto();

  void InitAsDefaultInstance();
  static Edge* default_instance_;
};
// -------------------------------------------------------------------

class NodeAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cyservice.NodeAttribute) */ {
 public:
  NodeAttribute();
  virtual ~NodeAttribute();

  NodeAttribute(const NodeAttribute& from);

  inline NodeAttribute& operator=(const NodeAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeAttribute& default_instance();

  void Swap(NodeAttribute* other);

  // implements Message ----------------------------------------------

  inline NodeAttribute* New() const { return New(NULL); }

  NodeAttribute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NodeAttribute& from);
  void MergeFrom(const NodeAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NodeAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 nodeId = 1;
  void clear_nodeid();
  static const int kNodeIdFieldNumber = 1;
  ::google::protobuf::int64 nodeid() const;
  void set_nodeid(::google::protobuf::int64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional int64 subnetId = 5;
  void clear_subnetid();
  static const int kSubnetIdFieldNumber = 5;
  ::google::protobuf::int64 subnetid() const;
  void set_subnetid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cyservice.NodeAttribute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 nodeid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int64 subnetid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cyservice_2eproto();
  friend void protobuf_AssignDesc_cyservice_2eproto();
  friend void protobuf_ShutdownFile_cyservice_2eproto();

  void InitAsDefaultInstance();
  static NodeAttribute* default_instance_;
};
// -------------------------------------------------------------------

class EdgeAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cyservice.EdgeAttribute) */ {
 public:
  EdgeAttribute();
  virtual ~EdgeAttribute();

  EdgeAttribute(const EdgeAttribute& from);

  inline EdgeAttribute& operator=(const EdgeAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EdgeAttribute& default_instance();

  void Swap(EdgeAttribute* other);

  // implements Message ----------------------------------------------

  inline EdgeAttribute* New() const { return New(NULL); }

  EdgeAttribute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EdgeAttribute& from);
  void MergeFrom(const EdgeAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EdgeAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 edgeId = 1;
  void clear_edgeid();
  static const int kEdgeIdFieldNumber = 1;
  ::google::protobuf::int64 edgeid() const;
  void set_edgeid(::google::protobuf::int64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional int64 subnetId = 5;
  void clear_subnetid();
  static const int kSubnetIdFieldNumber = 5;
  ::google::protobuf::int64 subnetid() const;
  void set_subnetid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cyservice.EdgeAttribute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 edgeid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int64 subnetid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cyservice_2eproto();
  friend void protobuf_AssignDesc_cyservice_2eproto();
  friend void protobuf_ShutdownFile_cyservice_2eproto();

  void InitAsDefaultInstance();
  static EdgeAttribute* default_instance_;
};
// -------------------------------------------------------------------

class NetworkAttribute : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cyservice.NetworkAttribute) */ {
 public:
  NetworkAttribute();
  virtual ~NetworkAttribute();

  NetworkAttribute(const NetworkAttribute& from);

  inline NetworkAttribute& operator=(const NetworkAttribute& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkAttribute& default_instance();

  void Swap(NetworkAttribute* other);

  // implements Message ----------------------------------------------

  inline NetworkAttribute* New() const { return New(NULL); }

  NetworkAttribute* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkAttribute& from);
  void MergeFrom(const NetworkAttribute& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkAttribute* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 edgeId = 1;
  void clear_edgeid();
  static const int kEdgeIdFieldNumber = 1;
  ::google::protobuf::int64 edgeid() const;
  void set_edgeid(::google::protobuf::int64 value);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional string type = 4;
  void clear_type();
  static const int kTypeFieldNumber = 4;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional int64 subnetId = 5;
  void clear_subnetid();
  static const int kSubnetIdFieldNumber = 5;
  ::google::protobuf::int64 subnetid() const;
  void set_subnetid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:cyservice.NetworkAttribute)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 edgeid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::int64 subnetid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cyservice_2eproto();
  friend void protobuf_AssignDesc_cyservice_2eproto();
  friend void protobuf_ShutdownFile_cyservice_2eproto();

  void InitAsDefaultInstance();
  static NetworkAttribute* default_instance_;
};
// -------------------------------------------------------------------

class AnonymousAspect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:cyservice.AnonymousAspect) */ {
 public:
  AnonymousAspect();
  virtual ~AnonymousAspect();

  AnonymousAspect(const AnonymousAspect& from);

  inline AnonymousAspect& operator=(const AnonymousAspect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AnonymousAspect& default_instance();

  void Swap(AnonymousAspect* other);

  // implements Message ----------------------------------------------

  inline AnonymousAspect* New() const { return New(NULL); }

  AnonymousAspect* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AnonymousAspect& from);
  void MergeFrom(const AnonymousAspect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AnonymousAspect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional bytes element = 2;
  void clear_element();
  static const int kElementFieldNumber = 2;
  const ::std::string& element() const;
  void set_element(const ::std::string& value);
  void set_element(const char* value);
  void set_element(const void* value, size_t size);
  ::std::string* mutable_element();
  ::std::string* release_element();
  void set_allocated_element(::std::string* element);

  // @@protoc_insertion_point(class_scope:cyservice.AnonymousAspect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr element_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_cyservice_2eproto();
  friend void protobuf_AssignDesc_cyservice_2eproto();
  friend void protobuf_ShutdownFile_cyservice_2eproto();

  void InitAsDefaultInstance();
  static AnonymousAspect* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Fragment

// optional .cyservice.MetaData metadata = 1;
inline bool Fragment::has_metadata() const {
  return element_case() == kMetadata;
}
inline void Fragment::set_has_metadata() {
  _oneof_case_[0] = kMetadata;
}
inline void Fragment::clear_metadata() {
  if (has_metadata()) {
    delete element_.metadata_;
    clear_has_element();
  }
}
inline  const ::cyservice::MetaData& Fragment::metadata() const {
  // @@protoc_insertion_point(field_get:cyservice.Fragment.metadata)
  return has_metadata()
      ? *element_.metadata_
      : ::cyservice::MetaData::default_instance();
}
inline ::cyservice::MetaData* Fragment::mutable_metadata() {
  if (!has_metadata()) {
    clear_element();
    set_has_metadata();
    element_.metadata_ = new ::cyservice::MetaData;
  }
  // @@protoc_insertion_point(field_mutable:cyservice.Fragment.metadata)
  return element_.metadata_;
}
inline ::cyservice::MetaData* Fragment::release_metadata() {
  // @@protoc_insertion_point(field_release:cyservice.Fragment.metadata)
  if (has_metadata()) {
    clear_has_element();
    ::cyservice::MetaData* temp = element_.metadata_;
    element_.metadata_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Fragment::set_allocated_metadata(::cyservice::MetaData* metadata) {
  clear_element();
  if (metadata) {
    set_has_metadata();
    element_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:cyservice.Fragment.metadata)
}

// optional .cyservice.Node node = 2;
inline bool Fragment::has_node() const {
  return element_case() == kNode;
}
inline void Fragment::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void Fragment::clear_node() {
  if (has_node()) {
    delete element_.node_;
    clear_has_element();
  }
}
inline  const ::cyservice::Node& Fragment::node() const {
  // @@protoc_insertion_point(field_get:cyservice.Fragment.node)
  return has_node()
      ? *element_.node_
      : ::cyservice::Node::default_instance();
}
inline ::cyservice::Node* Fragment::mutable_node() {
  if (!has_node()) {
    clear_element();
    set_has_node();
    element_.node_ = new ::cyservice::Node;
  }
  // @@protoc_insertion_point(field_mutable:cyservice.Fragment.node)
  return element_.node_;
}
inline ::cyservice::Node* Fragment::release_node() {
  // @@protoc_insertion_point(field_release:cyservice.Fragment.node)
  if (has_node()) {
    clear_has_element();
    ::cyservice::Node* temp = element_.node_;
    element_.node_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Fragment::set_allocated_node(::cyservice::Node* node) {
  clear_element();
  if (node) {
    set_has_node();
    element_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:cyservice.Fragment.node)
}

// optional .cyservice.Edge edge = 3;
inline bool Fragment::has_edge() const {
  return element_case() == kEdge;
}
inline void Fragment::set_has_edge() {
  _oneof_case_[0] = kEdge;
}
inline void Fragment::clear_edge() {
  if (has_edge()) {
    delete element_.edge_;
    clear_has_element();
  }
}
inline  const ::cyservice::Edge& Fragment::edge() const {
  // @@protoc_insertion_point(field_get:cyservice.Fragment.edge)
  return has_edge()
      ? *element_.edge_
      : ::cyservice::Edge::default_instance();
}
inline ::cyservice::Edge* Fragment::mutable_edge() {
  if (!has_edge()) {
    clear_element();
    set_has_edge();
    element_.edge_ = new ::cyservice::Edge;
  }
  // @@protoc_insertion_point(field_mutable:cyservice.Fragment.edge)
  return element_.edge_;
}
inline ::cyservice::Edge* Fragment::release_edge() {
  // @@protoc_insertion_point(field_release:cyservice.Fragment.edge)
  if (has_edge()) {
    clear_has_element();
    ::cyservice::Edge* temp = element_.edge_;
    element_.edge_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Fragment::set_allocated_edge(::cyservice::Edge* edge) {
  clear_element();
  if (edge) {
    set_has_edge();
    element_.edge_ = edge;
  }
  // @@protoc_insertion_point(field_set_allocated:cyservice.Fragment.edge)
}

// optional .cyservice.NodeAttribute nodeAttribute = 4;
inline bool Fragment::has_nodeattribute() const {
  return element_case() == kNodeAttribute;
}
inline void Fragment::set_has_nodeattribute() {
  _oneof_case_[0] = kNodeAttribute;
}
inline void Fragment::clear_nodeattribute() {
  if (has_nodeattribute()) {
    delete element_.nodeattribute_;
    clear_has_element();
  }
}
inline  const ::cyservice::NodeAttribute& Fragment::nodeattribute() const {
  // @@protoc_insertion_point(field_get:cyservice.Fragment.nodeAttribute)
  return has_nodeattribute()
      ? *element_.nodeattribute_
      : ::cyservice::NodeAttribute::default_instance();
}
inline ::cyservice::NodeAttribute* Fragment::mutable_nodeattribute() {
  if (!has_nodeattribute()) {
    clear_element();
    set_has_nodeattribute();
    element_.nodeattribute_ = new ::cyservice::NodeAttribute;
  }
  // @@protoc_insertion_point(field_mutable:cyservice.Fragment.nodeAttribute)
  return element_.nodeattribute_;
}
inline ::cyservice::NodeAttribute* Fragment::release_nodeattribute() {
  // @@protoc_insertion_point(field_release:cyservice.Fragment.nodeAttribute)
  if (has_nodeattribute()) {
    clear_has_element();
    ::cyservice::NodeAttribute* temp = element_.nodeattribute_;
    element_.nodeattribute_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Fragment::set_allocated_nodeattribute(::cyservice::NodeAttribute* nodeattribute) {
  clear_element();
  if (nodeattribute) {
    set_has_nodeattribute();
    element_.nodeattribute_ = nodeattribute;
  }
  // @@protoc_insertion_point(field_set_allocated:cyservice.Fragment.nodeAttribute)
}

// optional .cyservice.EdgeAttribute edgeAttribute = 5;
inline bool Fragment::has_edgeattribute() const {
  return element_case() == kEdgeAttribute;
}
inline void Fragment::set_has_edgeattribute() {
  _oneof_case_[0] = kEdgeAttribute;
}
inline void Fragment::clear_edgeattribute() {
  if (has_edgeattribute()) {
    delete element_.edgeattribute_;
    clear_has_element();
  }
}
inline  const ::cyservice::EdgeAttribute& Fragment::edgeattribute() const {
  // @@protoc_insertion_point(field_get:cyservice.Fragment.edgeAttribute)
  return has_edgeattribute()
      ? *element_.edgeattribute_
      : ::cyservice::EdgeAttribute::default_instance();
}
inline ::cyservice::EdgeAttribute* Fragment::mutable_edgeattribute() {
  if (!has_edgeattribute()) {
    clear_element();
    set_has_edgeattribute();
    element_.edgeattribute_ = new ::cyservice::EdgeAttribute;
  }
  // @@protoc_insertion_point(field_mutable:cyservice.Fragment.edgeAttribute)
  return element_.edgeattribute_;
}
inline ::cyservice::EdgeAttribute* Fragment::release_edgeattribute() {
  // @@protoc_insertion_point(field_release:cyservice.Fragment.edgeAttribute)
  if (has_edgeattribute()) {
    clear_has_element();
    ::cyservice::EdgeAttribute* temp = element_.edgeattribute_;
    element_.edgeattribute_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Fragment::set_allocated_edgeattribute(::cyservice::EdgeAttribute* edgeattribute) {
  clear_element();
  if (edgeattribute) {
    set_has_edgeattribute();
    element_.edgeattribute_ = edgeattribute;
  }
  // @@protoc_insertion_point(field_set_allocated:cyservice.Fragment.edgeAttribute)
}

// optional .cyservice.NetworkAttribute networkAttribute = 6;
inline bool Fragment::has_networkattribute() const {
  return element_case() == kNetworkAttribute;
}
inline void Fragment::set_has_networkattribute() {
  _oneof_case_[0] = kNetworkAttribute;
}
inline void Fragment::clear_networkattribute() {
  if (has_networkattribute()) {
    delete element_.networkattribute_;
    clear_has_element();
  }
}
inline  const ::cyservice::NetworkAttribute& Fragment::networkattribute() const {
  // @@protoc_insertion_point(field_get:cyservice.Fragment.networkAttribute)
  return has_networkattribute()
      ? *element_.networkattribute_
      : ::cyservice::NetworkAttribute::default_instance();
}
inline ::cyservice::NetworkAttribute* Fragment::mutable_networkattribute() {
  if (!has_networkattribute()) {
    clear_element();
    set_has_networkattribute();
    element_.networkattribute_ = new ::cyservice::NetworkAttribute;
  }
  // @@protoc_insertion_point(field_mutable:cyservice.Fragment.networkAttribute)
  return element_.networkattribute_;
}
inline ::cyservice::NetworkAttribute* Fragment::release_networkattribute() {
  // @@protoc_insertion_point(field_release:cyservice.Fragment.networkAttribute)
  if (has_networkattribute()) {
    clear_has_element();
    ::cyservice::NetworkAttribute* temp = element_.networkattribute_;
    element_.networkattribute_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Fragment::set_allocated_networkattribute(::cyservice::NetworkAttribute* networkattribute) {
  clear_element();
  if (networkattribute) {
    set_has_networkattribute();
    element_.networkattribute_ = networkattribute;
  }
  // @@protoc_insertion_point(field_set_allocated:cyservice.Fragment.networkAttribute)
}

// optional .cyservice.AnonymousAspect aspect = 7;
inline bool Fragment::has_aspect() const {
  return element_case() == kAspect;
}
inline void Fragment::set_has_aspect() {
  _oneof_case_[0] = kAspect;
}
inline void Fragment::clear_aspect() {
  if (has_aspect()) {
    delete element_.aspect_;
    clear_has_element();
  }
}
inline  const ::cyservice::AnonymousAspect& Fragment::aspect() const {
  // @@protoc_insertion_point(field_get:cyservice.Fragment.aspect)
  return has_aspect()
      ? *element_.aspect_
      : ::cyservice::AnonymousAspect::default_instance();
}
inline ::cyservice::AnonymousAspect* Fragment::mutable_aspect() {
  if (!has_aspect()) {
    clear_element();
    set_has_aspect();
    element_.aspect_ = new ::cyservice::AnonymousAspect;
  }
  // @@protoc_insertion_point(field_mutable:cyservice.Fragment.aspect)
  return element_.aspect_;
}
inline ::cyservice::AnonymousAspect* Fragment::release_aspect() {
  // @@protoc_insertion_point(field_release:cyservice.Fragment.aspect)
  if (has_aspect()) {
    clear_has_element();
    ::cyservice::AnonymousAspect* temp = element_.aspect_;
    element_.aspect_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Fragment::set_allocated_aspect(::cyservice::AnonymousAspect* aspect) {
  clear_element();
  if (aspect) {
    set_has_aspect();
    element_.aspect_ = aspect;
  }
  // @@protoc_insertion_point(field_set_allocated:cyservice.Fragment.aspect)
}

inline bool Fragment::has_element() const {
  return element_case() != ELEMENT_NOT_SET;
}
inline void Fragment::clear_has_element() {
  _oneof_case_[0] = ELEMENT_NOT_SET;
}
inline Fragment::ElementCase Fragment::element_case() const {
  return Fragment::ElementCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MetaData

// optional string name = 1;
inline void MetaData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetaData::name() const {
  // @@protoc_insertion_point(field_get:cyservice.MetaData.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetaData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.MetaData.name)
}
inline void MetaData::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.MetaData.name)
}
inline void MetaData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.MetaData.name)
}
inline ::std::string* MetaData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.MetaData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetaData::release_name() {
  // @@protoc_insertion_point(field_release:cyservice.MetaData.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetaData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cyservice.MetaData.name)
}

// optional string version = 2;
inline void MetaData::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MetaData::version() const {
  // @@protoc_insertion_point(field_get:cyservice.MetaData.version)
  return version_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetaData::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.MetaData.version)
}
inline void MetaData::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.MetaData.version)
}
inline void MetaData::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.MetaData.version)
}
inline ::std::string* MetaData::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.MetaData.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MetaData::release_version() {
  // @@protoc_insertion_point(field_release:cyservice.MetaData.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MetaData::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:cyservice.MetaData.version)
}

// optional int64 idCounter = 3;
inline void MetaData::clear_idcounter() {
  idcounter_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MetaData::idcounter() const {
  // @@protoc_insertion_point(field_get:cyservice.MetaData.idCounter)
  return idcounter_;
}
inline void MetaData::set_idcounter(::google::protobuf::int64 value) {
  
  idcounter_ = value;
  // @@protoc_insertion_point(field_set:cyservice.MetaData.idCounter)
}

// optional int64 elementCount = 4;
inline void MetaData::clear_elementcount() {
  elementcount_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MetaData::elementcount() const {
  // @@protoc_insertion_point(field_get:cyservice.MetaData.elementCount)
  return elementcount_;
}
inline void MetaData::set_elementcount(::google::protobuf::int64 value) {
  
  elementcount_ = value;
  // @@protoc_insertion_point(field_set:cyservice.MetaData.elementCount)
}

// optional int64 consistencyGroup = 5;
inline void MetaData::clear_consistencygroup() {
  consistencygroup_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MetaData::consistencygroup() const {
  // @@protoc_insertion_point(field_get:cyservice.MetaData.consistencyGroup)
  return consistencygroup_;
}
inline void MetaData::set_consistencygroup(::google::protobuf::int64 value) {
  
  consistencygroup_ = value;
  // @@protoc_insertion_point(field_set:cyservice.MetaData.consistencyGroup)
}

// optional int64 checksum = 6;
inline void MetaData::clear_checksum() {
  checksum_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MetaData::checksum() const {
  // @@protoc_insertion_point(field_get:cyservice.MetaData.checksum)
  return checksum_;
}
inline void MetaData::set_checksum(::google::protobuf::int64 value) {
  
  checksum_ = value;
  // @@protoc_insertion_point(field_set:cyservice.MetaData.checksum)
}

// repeated .cyservice.KeyValue properties = 7;
inline int MetaData::properties_size() const {
  return properties_.size();
}
inline void MetaData::clear_properties() {
  properties_.Clear();
}
inline const ::cyservice::KeyValue& MetaData::properties(int index) const {
  // @@protoc_insertion_point(field_get:cyservice.MetaData.properties)
  return properties_.Get(index);
}
inline ::cyservice::KeyValue* MetaData::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:cyservice.MetaData.properties)
  return properties_.Mutable(index);
}
inline ::cyservice::KeyValue* MetaData::add_properties() {
  // @@protoc_insertion_point(field_add:cyservice.MetaData.properties)
  return properties_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::cyservice::KeyValue >*
MetaData::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:cyservice.MetaData.properties)
  return &properties_;
}
inline const ::google::protobuf::RepeatedPtrField< ::cyservice::KeyValue >&
MetaData::properties() const {
  // @@protoc_insertion_point(field_list:cyservice.MetaData.properties)
  return properties_;
}

// -------------------------------------------------------------------

// KeyValue

// optional string name = 1;
inline void KeyValue::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::name() const {
  // @@protoc_insertion_point(field_get:cyservice.KeyValue.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.KeyValue.name)
}
inline void KeyValue::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.KeyValue.name)
}
inline void KeyValue::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.KeyValue.name)
}
inline ::std::string* KeyValue::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.KeyValue.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_name() {
  // @@protoc_insertion_point(field_release:cyservice.KeyValue.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cyservice.KeyValue.name)
}

// optional string value = 2;
inline void KeyValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyValue::value() const {
  // @@protoc_insertion_point(field_get:cyservice.KeyValue.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.KeyValue.value)
}
inline void KeyValue::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.KeyValue.value)
}
inline void KeyValue::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.KeyValue.value)
}
inline ::std::string* KeyValue::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.KeyValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyValue::release_value() {
  // @@protoc_insertion_point(field_release:cyservice.KeyValue.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cyservice.KeyValue.value)
}

// -------------------------------------------------------------------

// Node

// optional int64 id = 1;
inline void Node::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Node::id() const {
  // @@protoc_insertion_point(field_get:cyservice.Node.id)
  return id_;
}
inline void Node::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cyservice.Node.id)
}

// optional string name = 2;
inline void Node::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::name() const {
  // @@protoc_insertion_point(field_get:cyservice.Node.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.Node.name)
}
inline void Node::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.Node.name)
}
inline void Node::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.Node.name)
}
inline ::std::string* Node::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.Node.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_name() {
  // @@protoc_insertion_point(field_release:cyservice.Node.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cyservice.Node.name)
}

// optional string represents = 3;
inline void Node::clear_represents() {
  represents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Node::represents() const {
  // @@protoc_insertion_point(field_get:cyservice.Node.represents)
  return represents_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_represents(const ::std::string& value) {
  
  represents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.Node.represents)
}
inline void Node::set_represents(const char* value) {
  
  represents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.Node.represents)
}
inline void Node::set_represents(const char* value, size_t size) {
  
  represents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.Node.represents)
}
inline ::std::string* Node::mutable_represents() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.Node.represents)
  return represents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_represents() {
  // @@protoc_insertion_point(field_release:cyservice.Node.represents)
  
  return represents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_represents(::std::string* represents) {
  if (represents != NULL) {
    
  } else {
    
  }
  represents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), represents);
  // @@protoc_insertion_point(field_set_allocated:cyservice.Node.represents)
}

// -------------------------------------------------------------------

// Edge

// optional int64 id = 1;
inline void Edge::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Edge::id() const {
  // @@protoc_insertion_point(field_get:cyservice.Edge.id)
  return id_;
}
inline void Edge::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:cyservice.Edge.id)
}

// optional int64 sourceId = 2;
inline void Edge::clear_sourceid() {
  sourceid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Edge::sourceid() const {
  // @@protoc_insertion_point(field_get:cyservice.Edge.sourceId)
  return sourceid_;
}
inline void Edge::set_sourceid(::google::protobuf::int64 value) {
  
  sourceid_ = value;
  // @@protoc_insertion_point(field_set:cyservice.Edge.sourceId)
}

// optional int64 targetId = 3;
inline void Edge::clear_targetid() {
  targetid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Edge::targetid() const {
  // @@protoc_insertion_point(field_get:cyservice.Edge.targetId)
  return targetid_;
}
inline void Edge::set_targetid(::google::protobuf::int64 value) {
  
  targetid_ = value;
  // @@protoc_insertion_point(field_set:cyservice.Edge.targetId)
}

// optional string interaction = 4;
inline void Edge::clear_interaction() {
  interaction_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Edge::interaction() const {
  // @@protoc_insertion_point(field_get:cyservice.Edge.interaction)
  return interaction_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_interaction(const ::std::string& value) {
  
  interaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.Edge.interaction)
}
inline void Edge::set_interaction(const char* value) {
  
  interaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.Edge.interaction)
}
inline void Edge::set_interaction(const char* value, size_t size) {
  
  interaction_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.Edge.interaction)
}
inline ::std::string* Edge::mutable_interaction() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.Edge.interaction)
  return interaction_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_interaction() {
  // @@protoc_insertion_point(field_release:cyservice.Edge.interaction)
  
  return interaction_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_interaction(::std::string* interaction) {
  if (interaction != NULL) {
    
  } else {
    
  }
  interaction_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interaction);
  // @@protoc_insertion_point(field_set_allocated:cyservice.Edge.interaction)
}

// -------------------------------------------------------------------

// NodeAttribute

// optional int64 nodeId = 1;
inline void NodeAttribute::clear_nodeid() {
  nodeid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NodeAttribute::nodeid() const {
  // @@protoc_insertion_point(field_get:cyservice.NodeAttribute.nodeId)
  return nodeid_;
}
inline void NodeAttribute::set_nodeid(::google::protobuf::int64 value) {
  
  nodeid_ = value;
  // @@protoc_insertion_point(field_set:cyservice.NodeAttribute.nodeId)
}

// optional string name = 2;
inline void NodeAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeAttribute::name() const {
  // @@protoc_insertion_point(field_get:cyservice.NodeAttribute.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeAttribute::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.NodeAttribute.name)
}
inline void NodeAttribute::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.NodeAttribute.name)
}
inline void NodeAttribute::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.NodeAttribute.name)
}
inline ::std::string* NodeAttribute::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.NodeAttribute.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeAttribute::release_name() {
  // @@protoc_insertion_point(field_release:cyservice.NodeAttribute.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeAttribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cyservice.NodeAttribute.name)
}

// optional string value = 3;
inline void NodeAttribute::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeAttribute::value() const {
  // @@protoc_insertion_point(field_get:cyservice.NodeAttribute.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeAttribute::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.NodeAttribute.value)
}
inline void NodeAttribute::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.NodeAttribute.value)
}
inline void NodeAttribute::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.NodeAttribute.value)
}
inline ::std::string* NodeAttribute::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.NodeAttribute.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeAttribute::release_value() {
  // @@protoc_insertion_point(field_release:cyservice.NodeAttribute.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeAttribute::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cyservice.NodeAttribute.value)
}

// optional string type = 4;
inline void NodeAttribute::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeAttribute::type() const {
  // @@protoc_insertion_point(field_get:cyservice.NodeAttribute.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeAttribute::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.NodeAttribute.type)
}
inline void NodeAttribute::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.NodeAttribute.type)
}
inline void NodeAttribute::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.NodeAttribute.type)
}
inline ::std::string* NodeAttribute::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.NodeAttribute.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeAttribute::release_type() {
  // @@protoc_insertion_point(field_release:cyservice.NodeAttribute.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeAttribute::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:cyservice.NodeAttribute.type)
}

// optional int64 subnetId = 5;
inline void NodeAttribute::clear_subnetid() {
  subnetid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NodeAttribute::subnetid() const {
  // @@protoc_insertion_point(field_get:cyservice.NodeAttribute.subnetId)
  return subnetid_;
}
inline void NodeAttribute::set_subnetid(::google::protobuf::int64 value) {
  
  subnetid_ = value;
  // @@protoc_insertion_point(field_set:cyservice.NodeAttribute.subnetId)
}

// -------------------------------------------------------------------

// EdgeAttribute

// optional int64 edgeId = 1;
inline void EdgeAttribute::clear_edgeid() {
  edgeid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EdgeAttribute::edgeid() const {
  // @@protoc_insertion_point(field_get:cyservice.EdgeAttribute.edgeId)
  return edgeid_;
}
inline void EdgeAttribute::set_edgeid(::google::protobuf::int64 value) {
  
  edgeid_ = value;
  // @@protoc_insertion_point(field_set:cyservice.EdgeAttribute.edgeId)
}

// optional string name = 2;
inline void EdgeAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EdgeAttribute::name() const {
  // @@protoc_insertion_point(field_get:cyservice.EdgeAttribute.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeAttribute::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.EdgeAttribute.name)
}
inline void EdgeAttribute::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.EdgeAttribute.name)
}
inline void EdgeAttribute::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.EdgeAttribute.name)
}
inline ::std::string* EdgeAttribute::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.EdgeAttribute.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EdgeAttribute::release_name() {
  // @@protoc_insertion_point(field_release:cyservice.EdgeAttribute.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeAttribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cyservice.EdgeAttribute.name)
}

// optional string value = 3;
inline void EdgeAttribute::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EdgeAttribute::value() const {
  // @@protoc_insertion_point(field_get:cyservice.EdgeAttribute.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeAttribute::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.EdgeAttribute.value)
}
inline void EdgeAttribute::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.EdgeAttribute.value)
}
inline void EdgeAttribute::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.EdgeAttribute.value)
}
inline ::std::string* EdgeAttribute::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.EdgeAttribute.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EdgeAttribute::release_value() {
  // @@protoc_insertion_point(field_release:cyservice.EdgeAttribute.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeAttribute::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cyservice.EdgeAttribute.value)
}

// optional string type = 4;
inline void EdgeAttribute::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EdgeAttribute::type() const {
  // @@protoc_insertion_point(field_get:cyservice.EdgeAttribute.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeAttribute::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.EdgeAttribute.type)
}
inline void EdgeAttribute::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.EdgeAttribute.type)
}
inline void EdgeAttribute::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.EdgeAttribute.type)
}
inline ::std::string* EdgeAttribute::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.EdgeAttribute.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EdgeAttribute::release_type() {
  // @@protoc_insertion_point(field_release:cyservice.EdgeAttribute.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EdgeAttribute::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:cyservice.EdgeAttribute.type)
}

// optional int64 subnetId = 5;
inline void EdgeAttribute::clear_subnetid() {
  subnetid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EdgeAttribute::subnetid() const {
  // @@protoc_insertion_point(field_get:cyservice.EdgeAttribute.subnetId)
  return subnetid_;
}
inline void EdgeAttribute::set_subnetid(::google::protobuf::int64 value) {
  
  subnetid_ = value;
  // @@protoc_insertion_point(field_set:cyservice.EdgeAttribute.subnetId)
}

// -------------------------------------------------------------------

// NetworkAttribute

// optional int64 edgeId = 1;
inline void NetworkAttribute::clear_edgeid() {
  edgeid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NetworkAttribute::edgeid() const {
  // @@protoc_insertion_point(field_get:cyservice.NetworkAttribute.edgeId)
  return edgeid_;
}
inline void NetworkAttribute::set_edgeid(::google::protobuf::int64 value) {
  
  edgeid_ = value;
  // @@protoc_insertion_point(field_set:cyservice.NetworkAttribute.edgeId)
}

// optional string name = 2;
inline void NetworkAttribute::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkAttribute::name() const {
  // @@protoc_insertion_point(field_get:cyservice.NetworkAttribute.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAttribute::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.NetworkAttribute.name)
}
inline void NetworkAttribute::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.NetworkAttribute.name)
}
inline void NetworkAttribute::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.NetworkAttribute.name)
}
inline ::std::string* NetworkAttribute::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.NetworkAttribute.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkAttribute::release_name() {
  // @@protoc_insertion_point(field_release:cyservice.NetworkAttribute.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAttribute::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:cyservice.NetworkAttribute.name)
}

// optional string value = 3;
inline void NetworkAttribute::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkAttribute::value() const {
  // @@protoc_insertion_point(field_get:cyservice.NetworkAttribute.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAttribute::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.NetworkAttribute.value)
}
inline void NetworkAttribute::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.NetworkAttribute.value)
}
inline void NetworkAttribute::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.NetworkAttribute.value)
}
inline ::std::string* NetworkAttribute::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.NetworkAttribute.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkAttribute::release_value() {
  // @@protoc_insertion_point(field_release:cyservice.NetworkAttribute.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAttribute::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:cyservice.NetworkAttribute.value)
}

// optional string type = 4;
inline void NetworkAttribute::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkAttribute::type() const {
  // @@protoc_insertion_point(field_get:cyservice.NetworkAttribute.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAttribute::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.NetworkAttribute.type)
}
inline void NetworkAttribute::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.NetworkAttribute.type)
}
inline void NetworkAttribute::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.NetworkAttribute.type)
}
inline ::std::string* NetworkAttribute::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.NetworkAttribute.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkAttribute::release_type() {
  // @@protoc_insertion_point(field_release:cyservice.NetworkAttribute.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAttribute::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:cyservice.NetworkAttribute.type)
}

// optional int64 subnetId = 5;
inline void NetworkAttribute::clear_subnetid() {
  subnetid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NetworkAttribute::subnetid() const {
  // @@protoc_insertion_point(field_get:cyservice.NetworkAttribute.subnetId)
  return subnetid_;
}
inline void NetworkAttribute::set_subnetid(::google::protobuf::int64 value) {
  
  subnetid_ = value;
  // @@protoc_insertion_point(field_set:cyservice.NetworkAttribute.subnetId)
}

// -------------------------------------------------------------------

// AnonymousAspect

// optional string type = 1;
inline void AnonymousAspect::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnonymousAspect::type() const {
  // @@protoc_insertion_point(field_get:cyservice.AnonymousAspect.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnonymousAspect::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.AnonymousAspect.type)
}
inline void AnonymousAspect::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.AnonymousAspect.type)
}
inline void AnonymousAspect::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.AnonymousAspect.type)
}
inline ::std::string* AnonymousAspect::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.AnonymousAspect.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnonymousAspect::release_type() {
  // @@protoc_insertion_point(field_release:cyservice.AnonymousAspect.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnonymousAspect::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:cyservice.AnonymousAspect.type)
}

// optional bytes element = 2;
inline void AnonymousAspect::clear_element() {
  element_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AnonymousAspect::element() const {
  // @@protoc_insertion_point(field_get:cyservice.AnonymousAspect.element)
  return element_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnonymousAspect::set_element(const ::std::string& value) {
  
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:cyservice.AnonymousAspect.element)
}
inline void AnonymousAspect::set_element(const char* value) {
  
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:cyservice.AnonymousAspect.element)
}
inline void AnonymousAspect::set_element(const void* value, size_t size) {
  
  element_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:cyservice.AnonymousAspect.element)
}
inline ::std::string* AnonymousAspect::mutable_element() {
  
  // @@protoc_insertion_point(field_mutable:cyservice.AnonymousAspect.element)
  return element_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AnonymousAspect::release_element() {
  // @@protoc_insertion_point(field_release:cyservice.AnonymousAspect.element)
  
  return element_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AnonymousAspect::set_allocated_element(::std::string* element) {
  if (element != NULL) {
    
  } else {
    
  }
  element_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), element);
  // @@protoc_insertion_point(field_set_allocated:cyservice.AnonymousAspect.element)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cyservice

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_cyservice_2eproto__INCLUDED
